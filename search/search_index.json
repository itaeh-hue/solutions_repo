{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Deriving basic formulas of the projectile motion Suppose a projectile is launched at an angle \\(\\theta\\) above the horizontal with an initial velocity \\(v_{0}\\) . For simplicity, assume no air resistance. We can split the motion of the projectile into two components: Horizontal motion ( \\(x\\) -direction) \\[x(t)=v_{0}\\cos (\\theta) t\\] Deriving: Starting from the basic kinematic equation of a path: \\[x(t) = v_{0x}t\\] But since here we calculate solely the \\(x\\) component of the motion, and the projectile is launched at a certain angle \\(\\theta\\) , we substitute \\(v_{0x}\\) with its projection to the \\(x\\) -axis, \\(v_{0x}=v_0 \\cos(\\theta)t\\) : \\[\\boxed{x(t)=v_{0}\\cos (\\theta) t}\\] Vertical motion ( \\(y\\) -direction) : \\[\\boxed{y(t) = v_{0}\\sin(\\theta)t-\\frac{1}{2}gt^2}\\] where \\(g\\) is the acceleration due to gravity, which brings the projectile back (so the minus sign). Deriving: Similar to the \\(x\\) -axis equation, the path would be given by \\(y(t)= v_{0y}t\\) . But this time, the \\(y\\) component of the motion is influenced by the \\(g\\) gravity acceleration: \\(y(t)= v_{0y}t - \\frac{1}{2}gt^2\\) . When the projectile hits the ground Deriving basic formulas of the projectile motion Suppose a projectile is launched at an angle \\(\\theta\\) above the horizontal with an initial velocity \\(v_{0}\\) . For simplicity, assume no air resistance. We can split the motion of the projectile into two components: Horizontal motion ( \\(x\\) -direction) \\[x(t)=v_{0}\\cos (\\theta) t\\] Deriving: Starting from the basic kinematic equation of a path: \\[x(t) = v_{0x}t\\] But since here we calculate solely the \\(x\\) component of the motion, and the projectile is launched at a certain angle \\(\\theta\\) , we substitute \\(v_{0x}\\) with its projection to the \\(x\\) -axis, \\(v_{0x}=v_0 \\cos(\\theta)t\\) : \\[\\boxed{x(t)=v_{0}\\cos (\\theta) t}\\] Vertical motion ( \\(y\\) -direction) : \\[\\boxed{y(t) = v_{0}\\sin(\\theta)t-\\frac{1}{2}gt^2}\\] where \\(g\\) is the acceleration due to gravity, which brings the projectile back (so the minus sign). Deriving: Similar to the \\(x\\) -axis equation, the path would be given by \\(y(t)= v_{0y}t\\) . But this time, the \\(y\\) component of the motion is influenced by the \\(g\\) gravity acceleration: \\(y(t)= v_{0y}t - \\frac{1}{2}gt^2\\) . When the projectile hits the ground To find when the projectile hits the ground, we set \\(y(t)=0\\) (altitude zero): \\[0=v_{0}\\sin(\\theta)t -\\frac{1}{2}gt^2\\] \\[\\frac{1}{2}gt^2 + v_{0}\\sin(\\theta) = 0\\] Solving the quadratic equation: \\(D=(v_{0}\\sin(\\theta))^2\\) \\(t_{1} = \\frac{-v_{0}\\sin(\\theta)+v_{0}\\sin(\\theta)}{-1g} = \\frac{0}{-g} =0\\) - when the projectile is launched; \\(t_{2}=\\frac{-v_{0}\\sin(\\theta)-v_{0}\\sin(\\theta)}{-g}=\\frac{2v_{0}\\sin(\\theta)}{g}\\) So that, the total flight time of a projectile launched with the velocity \\(v_{0}\\) at the angle \\(\\theta\\) : \\[\\boxed{t_{f}=\\frac{2v_{0}\\sin(\\theta)}{g}}\\] The horizontal range The range that the projectile passes, i.e., the horizontal distance traveled when \\(t=t_{f}\\) , can be found by the formula: \\[R=v_{0x}(t_{f})=v_{0}\\cos(\\theta)\\frac{2v_{0}\\sin(\\theta)}{g}=\\frac{2v_{0}^2 \\left( \\frac{1}{2} \\sin(2\\theta)\\right) }{g}=\\frac{v_{0}^2\\sin(2\\theta) }{g}\\] \\[\\boxed{R=\\frac{v_{0}^2\\sin(2\\theta) }{g}}\\] Conclusions from the equations The general form of the range as a function of \\(\\theta\\) . It demonstrates how varying the launch angle affects the distance traveled. Different values of \\(v_0\\) affect the range as well. As a result, we get a family of parabolic curves when graphed. The range \\(R\\) depends on the angle of projection \\(\\theta\\) through the sine function, which reaches its maximum at \\(90^\\circ\\) . However, due to the sinusoidal nature of the \\(\\sin\u2061(2\\theta)\\) , the optimal launch angle for maximum horizontal range is \\(45^\\circ\\) . Here you can see my GeoGebra graph To find when the projectile hits the ground, we set \\(y(t)=0\\) (altitude zero): \\[0=v_{0}\\sin(\\theta)t -\\frac{1}{2}gt^2\\] \\( \\(-\\frac{1}{2}gt^2 + v_{0}\\sin(\\theta) = 0\\) \\) Solving the quadratic equation: \\(D=(v_{0}\\sin(\\theta))^2\\) \\(t_{1} = \\frac{-v_{0}\\sin(\\theta)+v_{0}\\sin(\\theta)}{-1g} = \\frac{0}{-g} =0\\) - when the projectile is launched; \\(t_{2}=\\frac{-v_{0}\\sin(\\theta)-v_{0}\\sin(\\theta)}{-g}=\\frac{2v_{0}\\sin(\\theta)}{g}\\) So that, the total flight time of a projectile launched with the velocity \\(v_{0}\\) at the angle \\(\\theta\\) : \\[\\boxed{t_{f}=\\frac{2v_{0}\\sin(\\theta)}{g}}\\] The horizontal range The range that the projectile passes, i.e., the horizontal distance traveled when \\(t=t_{f}\\) , can be found by the formula: \\[R=v_{0x}(t_{f})=v_{0}\\cos(\\theta)\\frac{2v_{0}\\sin(\\theta)}{g}=\\frac{2v_{0}^2 \\left( \\frac{1}{2} \\sin(2\\theta)\\right) }{g}=\\frac{v_{0}^2\\sin(2\\theta) }{g}\\] \\[\\boxed{R=\\frac{v_{0}^2\\sin(2\\theta) }{g}}\\] Conclusions from the equations The general form of the range as a function of \\(\\theta\\) . It demonstrates how varying the launch angle affects the distance traveled. Different values of \\(v_0\\) affect the range as well. As a result, we get a family of parabolic curves when graphed. The range \\(R\\) depends on the angle of projection \\(\\theta\\) through the sine function, which reaches its maximum at \\(90^\\circ\\) . However, due to the sinusoidal nature of the \\(\\sin\u2061(2\\theta)\\) , the optimal launch angle for maximum horizontal range is \\(45^\\circ\\) . Here you can see a GeoGebra graph: https://www.geogebra.org/calculator/wqefjqxb Taking altitude into account Given everything discussed above, let's add another parameter into the equation: altitude. - Suppose a projectile is launched from a height \\(h_{0}\\) above the ground. The equation of the vertical component of the motion then changes: \\[y(t)=h_{0}+v_{0}\\sin (\\theta) t - \\frac{1}{2}gt^2\\] To find the time of flight with this parameter added, we need to solve the above equation at \\(0\\) : \\[0=h_{0}+v_{0}\\sin (\\theta) t - \\frac{1}{2}gt^2\\] We get: Launch time: \\[t_{1}=\\frac{v_{0}\\sin(\\theta)+\\sqrt{ v_{0}^2\\sin(\\theta)^2 +2gh_{0} }}{g}\\] When the projectile hits the ground: \\[t_{2}=\\frac{v_{0}\\sin(\\theta)-\\sqrt{ v_{0}^2\\sin(\\theta)^2 +2gh_{0} }}{g}\\] The horizontal range is then: \\[R=v_{0}t_{2}\\] Demo Below is Python code that creates a graph illustrating the motion: import numpy as np import matplotlib.pyplot as plt def projectile_motion(v0, angle, g=9.81): \"\"\"Calculate the trajectory of a projectile.\"\"\" # Convert angle to radians angle_rad = np.radians(angle) # Time of flight t_f = (2 * v0 * np.sin(angle_rad)) / g # Time points for plotting t = np.linspace(0, t_f, num=500) # Calculate x and y positions x = v0 * np.cos(angle_rad) * t y = v0 * np.sin(angle_rad) * t - 0.5 * g * t**2 return x, y # Parameters initial_velocity = 30 # m/s angles = [15, 30, 45, 60, 75] # Selected launch angles (degrees) # Setting up the plot plt.figure(figsize=(10, 6)) # Loop through each angle to plot the trajectory for angle in angles: x, y = projectile_motion(initial_velocity, angle) plt.plot(x, y, label=f'\u03b8 = {angle}\u00b0') # Customize the plot plt.title('Projectile Trajectories for Different Launch Angles') plt.xlabel('Horizontal Distance (m)') plt.ylabel('Vertical Distance (m)') plt.axhline(0, color='gray', lw=0.8) # Ground line plt.axvline(0, color='gray', lw=0.8) # Vertical line plt.xlim(0, 100) # X-axis limit plt.ylim(0, 40) # Y-axis limit plt.grid() plt.legend() plt.show() Limitations The idealized model described above does not account for air resistance, which may be significant in certain applications.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#deriving-basic-formulas-of-the-projectile-motion","text":"Suppose a projectile is launched at an angle \\(\\theta\\) above the horizontal with an initial velocity \\(v_{0}\\) . For simplicity, assume no air resistance. We can split the motion of the projectile into two components:","title":"Deriving basic formulas of the projectile motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#horizontal-motion-x-direction","text":"\\[x(t)=v_{0}\\cos (\\theta) t\\] Deriving: Starting from the basic kinematic equation of a path: \\[x(t) = v_{0x}t\\] But since here we calculate solely the \\(x\\) component of the motion, and the projectile is launched at a certain angle \\(\\theta\\) , we substitute \\(v_{0x}\\) with its projection to the \\(x\\) -axis, \\(v_{0x}=v_0 \\cos(\\theta)t\\) : \\[\\boxed{x(t)=v_{0}\\cos (\\theta) t}\\]","title":"Horizontal motion (\\(x\\)-direction)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#vertical-motion-y-direction","text":"\\[\\boxed{y(t) = v_{0}\\sin(\\theta)t-\\frac{1}{2}gt^2}\\] where \\(g\\) is the acceleration due to gravity, which brings the projectile back (so the minus sign). Deriving: Similar to the \\(x\\) -axis equation, the path would be given by \\(y(t)= v_{0y}t\\) . But this time, the \\(y\\) component of the motion is influenced by the \\(g\\) gravity acceleration: \\(y(t)= v_{0y}t - \\frac{1}{2}gt^2\\) .","title":"Vertical motion (\\(y\\)-direction):"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#when-the-projectile-hits-the-ground","text":"","title":"When the projectile hits the ground"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#deriving-basic-formulas-of-the-projectile-motion_1","text":"Suppose a projectile is launched at an angle \\(\\theta\\) above the horizontal with an initial velocity \\(v_{0}\\) . For simplicity, assume no air resistance. We can split the motion of the projectile into two components:","title":"Deriving basic formulas of the projectile motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#horizontal-motion-x-direction_1","text":"\\[x(t)=v_{0}\\cos (\\theta) t\\] Deriving: Starting from the basic kinematic equation of a path: \\[x(t) = v_{0x}t\\] But since here we calculate solely the \\(x\\) component of the motion, and the projectile is launched at a certain angle \\(\\theta\\) , we substitute \\(v_{0x}\\) with its projection to the \\(x\\) -axis, \\(v_{0x}=v_0 \\cos(\\theta)t\\) : \\[\\boxed{x(t)=v_{0}\\cos (\\theta) t}\\]","title":"Horizontal motion (\\(x\\)-direction)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#vertical-motion-y-direction_1","text":"\\[\\boxed{y(t) = v_{0}\\sin(\\theta)t-\\frac{1}{2}gt^2}\\] where \\(g\\) is the acceleration due to gravity, which brings the projectile back (so the minus sign). Deriving: Similar to the \\(x\\) -axis equation, the path would be given by \\(y(t)= v_{0y}t\\) . But this time, the \\(y\\) component of the motion is influenced by the \\(g\\) gravity acceleration: \\(y(t)= v_{0y}t - \\frac{1}{2}gt^2\\) .","title":"Vertical motion (\\(y\\)-direction):"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#when-the-projectile-hits-the-ground_1","text":"To find when the projectile hits the ground, we set \\(y(t)=0\\) (altitude zero): \\[0=v_{0}\\sin(\\theta)t -\\frac{1}{2}gt^2\\] \\[\\frac{1}{2}gt^2 + v_{0}\\sin(\\theta) = 0\\] Solving the quadratic equation: \\(D=(v_{0}\\sin(\\theta))^2\\) \\(t_{1} = \\frac{-v_{0}\\sin(\\theta)+v_{0}\\sin(\\theta)}{-1g} = \\frac{0}{-g} =0\\) - when the projectile is launched; \\(t_{2}=\\frac{-v_{0}\\sin(\\theta)-v_{0}\\sin(\\theta)}{-g}=\\frac{2v_{0}\\sin(\\theta)}{g}\\) So that, the total flight time of a projectile launched with the velocity \\(v_{0}\\) at the angle \\(\\theta\\) : \\[\\boxed{t_{f}=\\frac{2v_{0}\\sin(\\theta)}{g}}\\]","title":"When the projectile hits the ground"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#the-horizontal-range","text":"The range that the projectile passes, i.e., the horizontal distance traveled when \\(t=t_{f}\\) , can be found by the formula: \\[R=v_{0x}(t_{f})=v_{0}\\cos(\\theta)\\frac{2v_{0}\\sin(\\theta)}{g}=\\frac{2v_{0}^2 \\left( \\frac{1}{2} \\sin(2\\theta)\\right) }{g}=\\frac{v_{0}^2\\sin(2\\theta) }{g}\\] \\[\\boxed{R=\\frac{v_{0}^2\\sin(2\\theta) }{g}}\\]","title":"The horizontal range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#conclusions-from-the-equations","text":"The general form of the range as a function of \\(\\theta\\) . It demonstrates how varying the launch angle affects the distance traveled. Different values of \\(v_0\\) affect the range as well. As a result, we get a family of parabolic curves when graphed. The range \\(R\\) depends on the angle of projection \\(\\theta\\) through the sine function, which reaches its maximum at \\(90^\\circ\\) . However, due to the sinusoidal nature of the \\(\\sin\u2061(2\\theta)\\) , the optimal launch angle for maximum horizontal range is \\(45^\\circ\\) . Here you can see my GeoGebra graph To find when the projectile hits the ground, we set \\(y(t)=0\\) (altitude zero): \\[0=v_{0}\\sin(\\theta)t -\\frac{1}{2}gt^2\\] \\( \\(-\\frac{1}{2}gt^2 + v_{0}\\sin(\\theta) = 0\\) \\) Solving the quadratic equation: \\(D=(v_{0}\\sin(\\theta))^2\\) \\(t_{1} = \\frac{-v_{0}\\sin(\\theta)+v_{0}\\sin(\\theta)}{-1g} = \\frac{0}{-g} =0\\) - when the projectile is launched; \\(t_{2}=\\frac{-v_{0}\\sin(\\theta)-v_{0}\\sin(\\theta)}{-g}=\\frac{2v_{0}\\sin(\\theta)}{g}\\) So that, the total flight time of a projectile launched with the velocity \\(v_{0}\\) at the angle \\(\\theta\\) : \\[\\boxed{t_{f}=\\frac{2v_{0}\\sin(\\theta)}{g}}\\]","title":"Conclusions from the equations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#the-horizontal-range_1","text":"The range that the projectile passes, i.e., the horizontal distance traveled when \\(t=t_{f}\\) , can be found by the formula: \\[R=v_{0x}(t_{f})=v_{0}\\cos(\\theta)\\frac{2v_{0}\\sin(\\theta)}{g}=\\frac{2v_{0}^2 \\left( \\frac{1}{2} \\sin(2\\theta)\\right) }{g}=\\frac{v_{0}^2\\sin(2\\theta) }{g}\\] \\[\\boxed{R=\\frac{v_{0}^2\\sin(2\\theta) }{g}}\\]","title":"The horizontal range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#conclusions-from-the-equations_1","text":"The general form of the range as a function of \\(\\theta\\) . It demonstrates how varying the launch angle affects the distance traveled. Different values of \\(v_0\\) affect the range as well. As a result, we get a family of parabolic curves when graphed. The range \\(R\\) depends on the angle of projection \\(\\theta\\) through the sine function, which reaches its maximum at \\(90^\\circ\\) . However, due to the sinusoidal nature of the \\(\\sin\u2061(2\\theta)\\) , the optimal launch angle for maximum horizontal range is \\(45^\\circ\\) . Here you can see a GeoGebra graph: https://www.geogebra.org/calculator/wqefjqxb","title":"Conclusions from the equations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#taking-altitude-into-account","text":"Given everything discussed above, let's add another parameter into the equation: altitude. - Suppose a projectile is launched from a height \\(h_{0}\\) above the ground. The equation of the vertical component of the motion then changes: \\[y(t)=h_{0}+v_{0}\\sin (\\theta) t - \\frac{1}{2}gt^2\\] To find the time of flight with this parameter added, we need to solve the above equation at \\(0\\) : \\[0=h_{0}+v_{0}\\sin (\\theta) t - \\frac{1}{2}gt^2\\] We get: Launch time: \\[t_{1}=\\frac{v_{0}\\sin(\\theta)+\\sqrt{ v_{0}^2\\sin(\\theta)^2 +2gh_{0} }}{g}\\] When the projectile hits the ground: \\[t_{2}=\\frac{v_{0}\\sin(\\theta)-\\sqrt{ v_{0}^2\\sin(\\theta)^2 +2gh_{0} }}{g}\\] The horizontal range is then: \\[R=v_{0}t_{2}\\]","title":"Taking altitude into account"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#demo","text":"Below is Python code that creates a graph illustrating the motion: import numpy as np import matplotlib.pyplot as plt def projectile_motion(v0, angle, g=9.81): \"\"\"Calculate the trajectory of a projectile.\"\"\" # Convert angle to radians angle_rad = np.radians(angle) # Time of flight t_f = (2 * v0 * np.sin(angle_rad)) / g # Time points for plotting t = np.linspace(0, t_f, num=500) # Calculate x and y positions x = v0 * np.cos(angle_rad) * t y = v0 * np.sin(angle_rad) * t - 0.5 * g * t**2 return x, y # Parameters initial_velocity = 30 # m/s angles = [15, 30, 45, 60, 75] # Selected launch angles (degrees) # Setting up the plot plt.figure(figsize=(10, 6)) # Loop through each angle to plot the trajectory for angle in angles: x, y = projectile_motion(initial_velocity, angle) plt.plot(x, y, label=f'\u03b8 = {angle}\u00b0') # Customize the plot plt.title('Projectile Trajectories for Different Launch Angles') plt.xlabel('Horizontal Distance (m)') plt.ylabel('Vertical Distance (m)') plt.axhline(0, color='gray', lw=0.8) # Ground line plt.axvline(0, color='gray', lw=0.8) # Vertical line plt.xlim(0, 100) # X-axis limit plt.ylim(0, 40) # Y-axis limit plt.grid() plt.legend() plt.show()","title":"Demo"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#limitations","text":"The idealized model described above does not account for air resistance, which may be significant in certain applications.","title":"Limitations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Pendulum motion: small angles The motion of a forced damped pendulum is described by the following second-order differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L}\\sin \\theta = A \\cos(wt) \\] This is a second-order differential equation governing the angular displacement \\(\\theta\\) of a pendulum with damping and driven forces. Here: Notation Description \\(\\theta\\) Angular displacement from the vertical ( equilibrium ) position; measured in radians. \\(\\frac{d^2\\theta}{dt^2}\\) Angular acceleration of the pendulum. \\(b\\) Damping coefficient (which accounts for friction or air resistance). \\(\\frac{d\\theta}{dt}\\) Angular velocity of the pendulum (the rate of change of the angle \\(\\theta\\) ) \\(g\\) Acceleration due to gravity. \\(L\\) The length of the pendulum. \\(A\\cos(\\omega t)\\) Represents the external driving force; \\(A\\) is the amplitude, and \\(\\omega\\) is the angular frequency of the external forcing. For small angles ( \\(\\theta\\) approaching to \\(0\\) or \\(\\theta \\approx 0\\) ), we can use the approximation \\(\\sin(\\theta) \\approx \\theta\\) . With this, the equation simplifies to: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L}\\sin \\theta = A \\cos(wt) \\implies \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\theta = A \\cos(wt) \\] Solving differential equation of a damped pendulum for small-angle approximations To solve the equation, we first consider the homogeneous part (setting the driving force to zero): \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\theta = 0 \\] This is a standard form for a damped harmonic oscillator. To solve this linear differential equation, we assume a solution of the form: \\[ \\theta(t) = e^{rt} \\] Here, \\(r\\) is the constant we want to determine. The first derivative of our assumed solution is \\(\\frac{d\\theta}{dt} = re^{rt}\\) . The second is \\(\\frac{d^2\\theta}{dt^2} = r^2e^{rt}\\) . Substituting, gives \\[ r^2e^{rt} + b(re^{rt}) + \\frac{g}{L}(e^{rt}) = 0 \\] Factoring out \\(e^{rt}\\) : \\[ e^{rt}(r^2 + br + \\frac{g}{L}) = 0 \\] The term \\(e^{rt}\\) does not contribute any solutions since it is always positive for real values of \\(r\\) . Therefore, we obtain our characteristic equation from the remaining polynomial: \\[ r^2+br+\\frac{g}{L} =0 \\] To find \\(r\\) , we need to solve the above equation: \\[ r = \\frac{-b\\pm \\sqrt{ b^2 -4\\frac{g}{L} }}{2} \\] Where \\(D= b^2 -4\\frac{g}{L}\\) . Roots and behavior: Underdamped Condition: \\(D > 0 \\implies b^2 \\gt 4 \\frac{g}{L}\\) Result: Two distinct real roots, leading to oscillatory motion with gradually decreasing amplitude (oscillations). Physically, this means the pendulum swings back and forth across the vertical position, with the amplitude decreasing over time due to damping. The oscillations gradually lose energy (due to friction or air resistance), resulting in a motion that resembles a sine wave, but one that progressively decays. This is the pendulum we usually think about, i.e., a swinging pendulum that slowly stops swinging as it loses energy. Critically damped Condition: \\(D = 0 \\implies b^2 = 4 \\frac{g}{L}\\) Result: Two identical real roots, leading to the system returning to equilibrium as quickly as possible without oscillating. In this case, the pendulum will move towards its lowest point but won't overshoot or undergo any oscillation. It smoothly comes to rest at the vertical position. Take a door as an example: its damping mechanism shuts the door quickly without bouncing back. Overdamped Condition: \\(D < 0 \\implies b^2 < 4 \\frac{g}{L}\\) Result: Two complex conjugate roots, leading to a non-oscillatory return toward equilibrium. The system takes longer to return than in the critically damped case. Here, the pendulum slowly returns to its resting position without any oscillations, typically taking a longer time to settle compared to the critically damped case. For example, a pendulum that is heavily damped (like a long jump rope acting as a pendulum) that gently settles down without swinging back and forth. Take a look at my Python demonstration: import numpy as np import matplotlib.pyplot as plt # Constants g = 9.81 # acceleration due to gravity (m/s^2) L = 1.0 # length of the pendulum (m) # Time array t = np.linspace(0, 10, 500) # Underdamped case parameters (b^2 > 4g/L) b_underdamped = 1.0 omega_d_underdamped = np.sqrt(g / L - (b_underdamped / 2) ** 2) theta_underdamped = np.exp(-b_underdamped / 2 * t) * (np.cos(omega_d_underdamped * t) + np.sin(omega_d_underdamped * t)) # Critically damped case parameters (b^2 = 4g/L) b_critically_damped = 2 * np.sqrt(g / L) theta_critically_damped = np.exp(-b_critically_damped / 2 * t) * (1 + (b_critically_damped / 2) * t) # Overdamped case parameters (b^2 < 4g/L) b_overdamped = 3.0 # Choose a value greater than 2*sqrt(g/L) omega_0_overdamped = np.sqrt((b_overdamped / 2) ** 2 - g / L) theta_overdamped = np.exp(-b_overdamped / 2 * t) * (np.cosh(omega_0_overdamped * t) - (b_overdamped / (2*omega_0_overdamped)) * np.sinh(omega_0_overdamped * t)) # Plotting plt.figure(figsize=(12, 8)) # Underdamped plt.subplot(3, 1, 1) plt.plot(t, theta_underdamped, label='Underdamped', color='blue') plt.title('Underdamped Motion') plt.xlabel('Time (s)') plt.ylabel('Angle (radians)') plt.grid() plt.legend() # Critically Damped plt.subplot(3, 1, 2) plt.plot(t, theta_critically_damped, label='Critically Damped', color='orange') plt.title('Critically Damped Motion') plt.xlabel('Time (s)') plt.ylabel('Angle (radians)') plt.grid() plt.legend() # Overdamped plt.subplot(3, 1, 3) plt.plot(t, theta_overdamped, label='Overdamped', color='green') plt.title('Overdamped Motion') plt.xlabel('Time (s)') plt.ylabel('Angle (radians)') plt.grid() plt.legend() # Adjust layout plt.tight_layout() plt.show() Exploring initial conditions of an underdamped pendulum Changing damping coefficient import numpy as np import matplotlib.pyplot as plt # Constants g = 9.81 # acceleration due to gravity (m/s^2) L = 1.0 # length of the pendulum (m) # Time array t = np.linspace(0, 10, 500) # Plotting plt.figure(figsize=(12, 8)) b_underdamped = 1.0 omega_d_underdamped = np.sqrt(g / L - (b_underdamped / 2) ** 2) theta_underdamped = np.exp(-b_underdamped / 2 * t) * (np.cos(omega_d_underdamped * t) + np.sin(omega_d_underdamped * t)) # Underdamped plt.subplot(3, 1, 1) plt.plot(t, theta_underdamped, label='Underdamped: b = 1', color='blue') plt.title('Underdamped Motion') plt.xlabel('Time (s)') plt.ylabel('Angle (radians)') plt.grid() plt.legend() b_underdamped = 2.0 omega_d_underdamped = np.sqrt(g / L - (b_underdamped / 2) ** 2) theta_underdamped = np.exp(-b_underdamped / 2 * t) * (np.cos(omega_d_underdamped * t) + np.sin(omega_d_underdamped * t)) plt.subplot(3, 1, 2) plt.plot(t, theta_underdamped, label='Underdamped: b = 2', color='violet') plt.xlabel('Time (s)') plt.ylabel('Angle (radians)') plt.grid() plt.legend() b_underdamped = 3.0 omega_d_underdamped = np.sqrt(g / L - (b_underdamped / 2) ** 2) theta_underdamped = np.exp(-b_underdamped / 2 * t) * (np.cos(omega_d_underdamped * t) + np.sin(omega_d_underdamped * t)) # Overdamped plt.subplot(3, 1, 3) plt.plot(t, theta_underdamped, label='Underdamped: b = 3', color='red') plt.xlabel('Time (s)') plt.ylabel('Angle (radians)') plt.grid() plt.legend() # Adjust layout plt.tight_layout() plt.show() We see that, as we increase the damping coefficient, underdamped motion approaches to critically damped. Here is another thing. If we continue to increase the damping coefficient, at some point, the graph will disappear (overdamped). The red line below shows the maximum damping I could obtain by increasing the damping coefficient before the graph disappears: Changing pendulum length import numpy as np import matplotlib.pyplot as plt # Constants g = 9.81 # acceleration due to gravity (m/s^2) # Time array t = np.linspace(0, 10, 500) # Plotting plt.figure(figsize=(12, 8)) L = 1.0 # length of the pendulum (m) b_underdamped = 1.0 omega_d_underdamped = np.sqrt(g / L - (b_underdamped / 2) ** 2) theta_underdamped = np.exp(-b_underdamped / 2 * t) * (np.cos(omega_d_underdamped * t) + np.sin(omega_d_underdamped * t)) # Underdamped plt.subplot(3, 1, 1) plt.plot(t, theta_underdamped, label='L = 1', color='blue') plt.title('Underdamped Motion') plt.xlabel('Time (s)') plt.ylabel('Angle (radians)') plt.grid() plt.legend() L = 2.0 # length of the pendulum (m) b_underdamped = 1.0 omega_d_underdamped = np.sqrt(g / L - (b_underdamped / 2) ** 2) theta_underdamped = np.exp(-b_underdamped / 2 * t) * (np.cos(omega_d_underdamped * t) + np.sin(omega_d_underdamped * t)) plt.subplot(3, 1, 2) plt.plot(t, theta_underdamped, label='L = 2', color='violet') plt.xlabel('Time (s)') plt.ylabel('Angle (radians)') plt.grid() plt.legend() L = 3.0 # length of the pendulum (m) b_underdamped = 1.0 omega_d_underdamped = np.sqrt(g / L - (b_underdamped / 2) ** 2) theta_underdamped = np.exp(-b_underdamped / 2 * t) * (np.cos(omega_d_underdamped * t) + np.sin(omega_d_underdamped * t)) # Overdamped plt.subplot(3, 1, 3) plt.plot(t, theta_underdamped, label='L = 3', color='red') plt.xlabel('Time (s)') plt.ylabel('Angle (radians)') plt.grid() plt.legend() # Adjust layout plt.tight_layout() plt.show()","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#pendulum-motion-small-angles","text":"The motion of a forced damped pendulum is described by the following second-order differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L}\\sin \\theta = A \\cos(wt) \\] This is a second-order differential equation governing the angular displacement \\(\\theta\\) of a pendulum with damping and driven forces. Here: Notation Description \\(\\theta\\) Angular displacement from the vertical ( equilibrium ) position; measured in radians. \\(\\frac{d^2\\theta}{dt^2}\\) Angular acceleration of the pendulum. \\(b\\) Damping coefficient (which accounts for friction or air resistance). \\(\\frac{d\\theta}{dt}\\) Angular velocity of the pendulum (the rate of change of the angle \\(\\theta\\) ) \\(g\\) Acceleration due to gravity. \\(L\\) The length of the pendulum. \\(A\\cos(\\omega t)\\) Represents the external driving force; \\(A\\) is the amplitude, and \\(\\omega\\) is the angular frequency of the external forcing. For small angles ( \\(\\theta\\) approaching to \\(0\\) or \\(\\theta \\approx 0\\) ), we can use the approximation \\(\\sin(\\theta) \\approx \\theta\\) . With this, the equation simplifies to: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L}\\sin \\theta = A \\cos(wt) \\implies \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\theta = A \\cos(wt) \\]","title":"Pendulum motion: small angles"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#solving-differential-equation-of-a-damped-pendulum-for-small-angle-approximations","text":"To solve the equation, we first consider the homogeneous part (setting the driving force to zero): \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\theta = 0 \\] This is a standard form for a damped harmonic oscillator. To solve this linear differential equation, we assume a solution of the form: \\[ \\theta(t) = e^{rt} \\] Here, \\(r\\) is the constant we want to determine. The first derivative of our assumed solution is \\(\\frac{d\\theta}{dt} = re^{rt}\\) . The second is \\(\\frac{d^2\\theta}{dt^2} = r^2e^{rt}\\) . Substituting, gives \\[ r^2e^{rt} + b(re^{rt}) + \\frac{g}{L}(e^{rt}) = 0 \\] Factoring out \\(e^{rt}\\) : \\[ e^{rt}(r^2 + br + \\frac{g}{L}) = 0 \\] The term \\(e^{rt}\\) does not contribute any solutions since it is always positive for real values of \\(r\\) . Therefore, we obtain our characteristic equation from the remaining polynomial: \\[ r^2+br+\\frac{g}{L} =0 \\] To find \\(r\\) , we need to solve the above equation: \\[ r = \\frac{-b\\pm \\sqrt{ b^2 -4\\frac{g}{L} }}{2} \\] Where \\(D= b^2 -4\\frac{g}{L}\\) . Roots and behavior: Underdamped Condition: \\(D > 0 \\implies b^2 \\gt 4 \\frac{g}{L}\\) Result: Two distinct real roots, leading to oscillatory motion with gradually decreasing amplitude (oscillations). Physically, this means the pendulum swings back and forth across the vertical position, with the amplitude decreasing over time due to damping. The oscillations gradually lose energy (due to friction or air resistance), resulting in a motion that resembles a sine wave, but one that progressively decays. This is the pendulum we usually think about, i.e., a swinging pendulum that slowly stops swinging as it loses energy. Critically damped Condition: \\(D = 0 \\implies b^2 = 4 \\frac{g}{L}\\) Result: Two identical real roots, leading to the system returning to equilibrium as quickly as possible without oscillating. In this case, the pendulum will move towards its lowest point but won't overshoot or undergo any oscillation. It smoothly comes to rest at the vertical position. Take a door as an example: its damping mechanism shuts the door quickly without bouncing back. Overdamped Condition: \\(D < 0 \\implies b^2 < 4 \\frac{g}{L}\\) Result: Two complex conjugate roots, leading to a non-oscillatory return toward equilibrium. The system takes longer to return than in the critically damped case. Here, the pendulum slowly returns to its resting position without any oscillations, typically taking a longer time to settle compared to the critically damped case. For example, a pendulum that is heavily damped (like a long jump rope acting as a pendulum) that gently settles down without swinging back and forth. Take a look at my Python demonstration: import numpy as np import matplotlib.pyplot as plt # Constants g = 9.81 # acceleration due to gravity (m/s^2) L = 1.0 # length of the pendulum (m) # Time array t = np.linspace(0, 10, 500) # Underdamped case parameters (b^2 > 4g/L) b_underdamped = 1.0 omega_d_underdamped = np.sqrt(g / L - (b_underdamped / 2) ** 2) theta_underdamped = np.exp(-b_underdamped / 2 * t) * (np.cos(omega_d_underdamped * t) + np.sin(omega_d_underdamped * t)) # Critically damped case parameters (b^2 = 4g/L) b_critically_damped = 2 * np.sqrt(g / L) theta_critically_damped = np.exp(-b_critically_damped / 2 * t) * (1 + (b_critically_damped / 2) * t) # Overdamped case parameters (b^2 < 4g/L) b_overdamped = 3.0 # Choose a value greater than 2*sqrt(g/L) omega_0_overdamped = np.sqrt((b_overdamped / 2) ** 2 - g / L) theta_overdamped = np.exp(-b_overdamped / 2 * t) * (np.cosh(omega_0_overdamped * t) - (b_overdamped / (2*omega_0_overdamped)) * np.sinh(omega_0_overdamped * t)) # Plotting plt.figure(figsize=(12, 8)) # Underdamped plt.subplot(3, 1, 1) plt.plot(t, theta_underdamped, label='Underdamped', color='blue') plt.title('Underdamped Motion') plt.xlabel('Time (s)') plt.ylabel('Angle (radians)') plt.grid() plt.legend() # Critically Damped plt.subplot(3, 1, 2) plt.plot(t, theta_critically_damped, label='Critically Damped', color='orange') plt.title('Critically Damped Motion') plt.xlabel('Time (s)') plt.ylabel('Angle (radians)') plt.grid() plt.legend() # Overdamped plt.subplot(3, 1, 3) plt.plot(t, theta_overdamped, label='Overdamped', color='green') plt.title('Overdamped Motion') plt.xlabel('Time (s)') plt.ylabel('Angle (radians)') plt.grid() plt.legend() # Adjust layout plt.tight_layout() plt.show()","title":"Solving differential equation of a damped pendulum for small-angle approximations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#exploring-initial-conditions-of-an-underdamped-pendulum","text":"","title":"Exploring initial conditions of an underdamped pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#changing-damping-coefficient","text":"import numpy as np import matplotlib.pyplot as plt # Constants g = 9.81 # acceleration due to gravity (m/s^2) L = 1.0 # length of the pendulum (m) # Time array t = np.linspace(0, 10, 500) # Plotting plt.figure(figsize=(12, 8)) b_underdamped = 1.0 omega_d_underdamped = np.sqrt(g / L - (b_underdamped / 2) ** 2) theta_underdamped = np.exp(-b_underdamped / 2 * t) * (np.cos(omega_d_underdamped * t) + np.sin(omega_d_underdamped * t)) # Underdamped plt.subplot(3, 1, 1) plt.plot(t, theta_underdamped, label='Underdamped: b = 1', color='blue') plt.title('Underdamped Motion') plt.xlabel('Time (s)') plt.ylabel('Angle (radians)') plt.grid() plt.legend() b_underdamped = 2.0 omega_d_underdamped = np.sqrt(g / L - (b_underdamped / 2) ** 2) theta_underdamped = np.exp(-b_underdamped / 2 * t) * (np.cos(omega_d_underdamped * t) + np.sin(omega_d_underdamped * t)) plt.subplot(3, 1, 2) plt.plot(t, theta_underdamped, label='Underdamped: b = 2', color='violet') plt.xlabel('Time (s)') plt.ylabel('Angle (radians)') plt.grid() plt.legend() b_underdamped = 3.0 omega_d_underdamped = np.sqrt(g / L - (b_underdamped / 2) ** 2) theta_underdamped = np.exp(-b_underdamped / 2 * t) * (np.cos(omega_d_underdamped * t) + np.sin(omega_d_underdamped * t)) # Overdamped plt.subplot(3, 1, 3) plt.plot(t, theta_underdamped, label='Underdamped: b = 3', color='red') plt.xlabel('Time (s)') plt.ylabel('Angle (radians)') plt.grid() plt.legend() # Adjust layout plt.tight_layout() plt.show() We see that, as we increase the damping coefficient, underdamped motion approaches to critically damped. Here is another thing. If we continue to increase the damping coefficient, at some point, the graph will disappear (overdamped). The red line below shows the maximum damping I could obtain by increasing the damping coefficient before the graph disappears:","title":"Changing damping coefficient"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#changing-pendulum-length","text":"import numpy as np import matplotlib.pyplot as plt # Constants g = 9.81 # acceleration due to gravity (m/s^2) # Time array t = np.linspace(0, 10, 500) # Plotting plt.figure(figsize=(12, 8)) L = 1.0 # length of the pendulum (m) b_underdamped = 1.0 omega_d_underdamped = np.sqrt(g / L - (b_underdamped / 2) ** 2) theta_underdamped = np.exp(-b_underdamped / 2 * t) * (np.cos(omega_d_underdamped * t) + np.sin(omega_d_underdamped * t)) # Underdamped plt.subplot(3, 1, 1) plt.plot(t, theta_underdamped, label='L = 1', color='blue') plt.title('Underdamped Motion') plt.xlabel('Time (s)') plt.ylabel('Angle (radians)') plt.grid() plt.legend() L = 2.0 # length of the pendulum (m) b_underdamped = 1.0 omega_d_underdamped = np.sqrt(g / L - (b_underdamped / 2) ** 2) theta_underdamped = np.exp(-b_underdamped / 2 * t) * (np.cos(omega_d_underdamped * t) + np.sin(omega_d_underdamped * t)) plt.subplot(3, 1, 2) plt.plot(t, theta_underdamped, label='L = 2', color='violet') plt.xlabel('Time (s)') plt.ylabel('Angle (radians)') plt.grid() plt.legend() L = 3.0 # length of the pendulum (m) b_underdamped = 1.0 omega_d_underdamped = np.sqrt(g / L - (b_underdamped / 2) ** 2) theta_underdamped = np.exp(-b_underdamped / 2 * t) * (np.cos(omega_d_underdamped * t) + np.sin(omega_d_underdamped * t)) # Overdamped plt.subplot(3, 1, 3) plt.plot(t, theta_underdamped, label='L = 3', color='red') plt.xlabel('Time (s)') plt.ylabel('Angle (radians)') plt.grid() plt.legend() # Adjust layout plt.tight_layout() plt.show()","title":"Changing pendulum length"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}